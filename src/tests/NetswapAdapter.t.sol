pragma solidity 0.8.17;

import "forge-std/test.sol";
import "forge-std/console2.sol";
import "@dex/DexRouter.sol";
import "@dex/adapter/NetswapAdapterMetis.sol";
import "@dex/interfaces/IUnswapRouter02.sol";
import "@dex/interfaces/IUni.sol";
import "@dex/interfaces/IUniswapV2Factory.sol";

contract NetswapAdapterTest is Test {
    address ETH = 0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000;
    address WETH = 0x75cb093E4D61d2A2e65D8e0BBb01DE8d89b53481;
    address USDC = 0xEA32A96608495e54156Ae48931A7c20f0dcc1a21;
    DexRouter dexRouter = DexRouter(payable(0x6b2C0c7be2048Daa9b5527982C29f48062B34D58));
    address tokenApprove = 0x57df6092665eb6058DE53939612413ff4B09114E;
    address alice = vm.rememberKey(1);
    address bob = vm.rememberKey(2);
    NetswapAdapter adapter;

    function setUp() public {
        vm.createSelectFork("https://andromeda.metis.io/?owner=1088");
        adapter = new NetswapAdapter();
    }

    modifier payer(address _user, address _token, uint256 _amount) {
        vm.startPrank(_user);
        console2.log("%s user: Alice amount: %d", IERC20(_token).symbol(), IERC20(_token).balanceOf(_user));
        _;
        console2.log("%s user: Alice amount: %d", IERC20(_token).symbol(), IERC20(_token).balanceOf(_user));

        vm.stopPrank();
    }

    modifier receiver(address _user, address _token) {
        console2.log("%s user: Bob   amount: %d", IERC20(_token).symbol(), IERC20(_token).balanceOf(_user));
        _;
        console2.log("%s user: Bob   amount: %d", IERC20(_token).symbol(), IERC20(_token).balanceOf(_user));
    }

    struct SmartSwapInfo {
        uint256 orderId;
        address receiver;
        DexRouter.BaseRequest baseRequest;
        uint256[] batchesAmount;
        DexRouter.RouterPath[][] batches;
        PMMLib.PMMSwapRequest[] extraData;
    }

    function _test_smartswapTo() public payer(alice, ETH, 1 ether) receiver(bob, USDC) {
        address ETH_TOKEN_POOL = 0x5Ae3ee7fBB3Cb28C17e7ADc3a6Ae605ae2465091;
        vm.deal(alice, 1 ether);
        deal(ETH, address(adapter), 1 ether);
        SmartSwapInfo memory info;
        info.orderId = 0;
        info.receiver = bob;
        info.baseRequest.fromToken = uint256(uint160(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE));
        info.baseRequest.toToken = USDC;
        info.baseRequest.fromTokenAmount = 1 ether;
        info.baseRequest.minReturnAmount = 0;
        info.baseRequest.deadLine = block.timestamp;
        info.batchesAmount = new uint256[](1);
        info.batchesAmount[0] = 1 ether;
        info.batches = new DexRouter.RouterPath[][](1);
        info.batches[0] = new DexRouter.RouterPath[](1);
        info.batches[0][0].mixAdapters = new address[](1);
        info.batches[0][0].mixAdapters[0] = address(adapter);
        info.batches[0][0].assetTo = new address[](1);
        info.batches[0][0].assetTo[0] = address(adapter);
        info.batches[0][0].rawData = new uint256[](1);
        info.batches[0][0].rawData[0] =
            uint256(bytes32(abi.encodePacked(uint8(0x00), uint88(10000), address(ETH_TOKEN_POOL))));
        info.batches[0][0].extraData = new bytes[](1);
        info.batches[0][0].extraData[0] = abi.encode(30);
        info.batches[0][0].fromToken = uint256(uint160(WETH));
        info.extraData = new PMMLib.PMMSwapRequest[](0);
        dexRouter.smartSwapTo{value: 1 ether}(
            info.orderId, info.receiver, info.baseRequest, info.batchesAmount, info.batches, info.extraData
        );
    }

    function test_lark() public {
        address user = 0x6f9fFeA7370310Cd0F890dfde5e0E061059dcfD9;
        address dexRouter = 0x6b2C0c7be2048Daa9b5527982C29f48062B34D58;
        vm.etch(0x1672bf6CeFEaD677b720ceC58d77aFC0C11349fC, address(adapter).code);
        vm.warp(1);
        bytes memory data =
            hex"b80c2f09000000000000000000000000000000000000000000000000002e2e4be901abc0000000000000000000000000bb06dca3ae6887fabf931640f67cab3e3a16f4dc000000000000000000000000096a84536ab84e68ee210561ffd3a038e79736f100000000000000000000000000000000000000000000000000000000000ffa58000000000000000000000000000000000000000000000000007c286e79a3351b00000000000000000000000000000000000000000000000000000000661b99960000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000005c0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000ffa580000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000bb06dca3ae6887fabf931640f67cab3e3a16f4dc00000000000000000000000000000000000000000000000000000000000000010000000000000000000000001672bf6cefead677b720cec58d77afc0c11349fc00000000000000000000000000000000000000000000000000000000000000010000000000000000000000001672bf6cefead677b720cec58d77afc0c11349fc00000000000000000000000000000000000000000000000000000000000000010000000000000000000027108121113eb9952086dec3113690af0538bb5506fd000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000075cb093e4d61d2a2e65d8e0bbb01de8d89b5348100000000000000000000000000000000000000000000000000000000000000010000000000000000000000001672bf6cefead677b720cec58d77afc0c11349fc00000000000000000000000000000000000000000000000000000000000000010000000000000000000000001672bf6cefead677b720cec58d77afc0c11349fc000000000000000000000000000000000000000000000000000000000000000180000000000000000000271092372dc7425c4b6a05ff5aae791333de750ae9ed000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000000";
        vm.startPrank(user, user);
        (bool s,) = dexRouter.call(data);
        require(s, "not ok");
    }
}
