const { ethers } = require("hardhat");
const deployed = require('./deployed');

async function main() {

  const account = await ethers.getSigner("0xc82Ea2afE1Fd1D61C4A12f5CeB3D7000f564F5C6");
  const provider = new ethers.providers.JsonRpcProvider("https://rpc.ankr.com/eth");

  // The provider also allows signing transactions to
  // send ether and pay to change state within the blockchain.
  // For this, we need the account signer...
  const signer = provider.getSigner();

  fromToken = "0xdac17f958d2ee523a2206206994597c13d831ec7";
  toToken = "0x6b175474e89094c44da98b954eedeac495271d0f";
  // fromTokenAmount = "10000000000000";
  // check BalanceOf 
  InputToken = await ethers.getContractAt(
      "MockERC20",
      fromToken
  );
  OutputToken = await ethers.getContractAt(
      "MockERC20",
      toToken
  );

  console.log("before InputToken Balance: " + await InputToken.balanceOf(account.address));
  console.log("before OutputToken Balance: " + await OutputToken.balanceOf(account.address));
  // console.log("dex router address: ", dexRouter.address);

  // await InputToken.connect(account).approve(tokenApprove.address, ethers.constants.MaxUint256);
  // await InputToken.approve("0x40aA958dd87FC8305b97f2BA922CDdCa374bcD7f", await InputToken.balanceOf(account.address));

  const calldata = "0xb80c2f090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000006b175474e89094c44da98b954eedeac495271d0f00000000000000000000000000000000000000000000000000000000009896800000000000000000000000000000000000000000000000056b0c53b57cd09a1600000000000000000000000000000000000000000000000000000000636cd9d000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000989680000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000000000000000000000000000000000000000000100000000000000000000000043c9361709be9ce6b1e33ac31426b08dbc09e58a000000000000000000000000000000000000000000000000000000000000000100000000000000000000000043c9361709be9ce6b1e33ac31426b08dbc09e58a00000000000000000000000000000000000000000000000000000000000000010000000000000000000027104d7880b18373fd916bbe63227509a187a41f8b62000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000006b175474e89094c44da98b954eedeac495271d0f4d7880b18373fd916bbe63227509a187a41f8b620002000000000000000003c40000000000000000000000000000000000000000000000000000000000000000";

  tx = {
      "from": '0xc82Ea2afE1Fd1D61C4A12f5CeB3D7000f564F5C6',
      "to": "0x3b3ae790Df4F312e745D270119c6052904FB6790",
      "data": calldata,
      "gasLimit": 600000
  }
  
  const txRes = await signer.sendTransaction({ ...tx });
  console.log(txRes)
  console.log("after InputToken Balance: " + await InputToken.balanceOf(account.address));
  console.log("after OutputToken Balance: " + await OutputToken.balanceOf(account.address));
}

main()
  .then(() => process.exit(0))
  .catch(error => {
    console.error(error);
    process.exit(1);
  });
