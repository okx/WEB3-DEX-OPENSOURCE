const { ethers } = require("hardhat");
require("../../tools");
const { getConfig } = require("../../config");
const { setForkBlockNumber } = require("../../tools/chain");
tokenConfig = getConfig("eth")
const { initDexRouter, direction, FOREVER, ETH } = require("./utils")

async function executeWETH2RND() {

    // await setForkBlockNumber(10477965);

    // USDC shark
    // const accountAddress = "0x47ac0Fb4F2D84898e4D9E7b4DaB3C24507a6D503";

    // WBTC shark
    const accountAddress = "0xB60C61DBb7456f024f9338c739B02Be68e3F545C";

    // WETH Shark
    // const accountAddress = "0xBE0eB53F46cd790Cd13851d5EFf43D12404d33E8";
    
    await startMockAccount([accountAddress]);
    const account = await ethers.getSigner(accountAddress);

    // 
    await setBalance(accountAddress, "0x53444835ec58000000");

    WETH = await ethers.getContractAt(
        "MockERC20",
        "0x1f9840a85d5af5bf1d1762f925bdaddc4201f984"
    )
    USDT = await ethers.getContractAt(
        "MockERC20",
        "0x0bc529c00c6401aef6d220be8c6ea1667f6ad93e"
    )
    tokenApprove = await ethers.getContractAt(
        "TokenApprove",
        "0x40aA958dd87FC8305b97f2BA922CDdCa374bcD7f"
    );
    dexRouter = await ethers.getContractAt(
        "DexRouter",
        "0x3b3ae790Df4F312e745D270119c6052904FB6790"
    );
    univ2Adapter = await ethers.getContractAt(
        "UniV3Adapter",
        "0x03F911AeDc25c770e701B8F563E8102CfACd62c0"
    );

    // const fromTokenAmount = ethers.utils.parseUnits('100', 18);
    // const minReturnAmount = 0;
    // const deadLine = FOREVER;
    const uniV2PoolAddr = "0x703b120f15ab77b986a24c6f9262364d02f9432f"; // USDT-WETH Pool
    console.log("before WETH Balance: " + await WETH.balanceOf(account.address));
    const before = await USDT.balanceOf(account.address);
    console.log("before USDT Balance: " + await USDT.balanceOf(account.address));

    // node1
    // const mixAdapter1 = [
    //     univ2Adapter.address
    // ];
    // const assertTo1 = [
    //     uniV2PoolAddr
    // ];
    // const weight1 = Number(10000).toString(16).replace('0x', '');
    // const rawData1 = [
    //     "0x" +
    //     direction(WETH.address, USDT.address) +
    //     "0000000000000000000" +
    //     weight1 +
    //     uniV2PoolAddr.replace("0x", "")  // USDT-WETH Pool
    // ];
    // const moreInfo = 0x0
    // const extraData1 = [moreInfo];
    // const router1 = [mixAdapter1, assertTo1, rawData1, extraData1, USDT.address];

    // // layer1
    // const layer1 = [router1];

    // const baseRequest = [
    //     USDT.address,
    //     ETH.address,
    //     fromTokenAmount,
    //     minReturnAmount,
    //     deadLine,
    // ]

    r = await WETH.connect(account).approve(tokenApprove.address, ethers.constants.MaxUint256);
    beforeBalance = await ethers.provider.getBalance(accountAddress);
    console.log("ETH BeforeBalance: " + beforeBalance);

    // rxResult = await dexRouter.connect(account).smartSwap(
    //     baseRequest,
    //     [fromTokenAmount],
    //     [layer1],
    //     []
    // );
    // console.log(rxResult.data);
    
    const tx = {
        from: accountAddress,
        to: dexRouter.address,
        nonce: ethers.provider.getTransactionCount(accountAddress, "latest"),
        value: "0x056bc75e2d63100000",
        data: ""
    };
    rxResult = await account.sendTransaction(
        tx
    );
    // console.log(rxResult);

    gasCost = await getTransactionCost(rxResult);
    console.log("gasCost: " + gasCost);
    afterBalance = await ethers.provider.getBalance(accountAddress);
    console.log("ETH AfterBalance: " + afterBalance);
    console.log("Result: " + ethers.BigNumber.from(afterBalance).add(ethers.BigNumber.from(gasCost).sub(ethers.BigNumber.from(beforeBalance))).toString());
    console.log("after WETH Balance: " + await WETH.balanceOf(account.address));
    console.log("after USDT Balance: " + await USDT.balanceOf(account.address));
    const after = await USDT.balanceOf(account.address);

    console.log("Result: " + ethers.BigNumber.from(after).sub(ethers.BigNumber.from(before)).toString());
}

const getTransactionCost = async (txResult) => {
    const cumulativeGasUsed = (await txResult.wait()).cumulativeGasUsed;
    return ethers.BigNumber.from(txResult.gasPrice).mul(ethers.BigNumber.from(cumulativeGasUsed));
  };

async function main() {
    await executeWETH2RND();
}

main()
    .then(() => process.exit(0))
    .catch(error => {
        console.error(error);
        process.exit(1);
    });
